// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: booking/booking.proto

package booking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookingClient is the client API for Booking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingClient interface {
	Create(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*Receipt, error)
	GetReceipt(ctx context.Context, in *UserEmail, opts ...grpc.CallOption) (*Receipt, error)
	UpdateSeat(ctx context.Context, in *UpdateSeatRequest, opts ...grpc.CallOption) (*Receipt, error)
	Cancel(ctx context.Context, in *UserEmail, opts ...grpc.CallOption) (*Empty, error)
	GetSeatAllocations(ctx context.Context, in *Section, opts ...grpc.CallOption) (*AllocationList, error)
}

type bookingClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingClient(cc grpc.ClientConnInterface) BookingClient {
	return &bookingClient{cc}
}

func (c *bookingClient) Create(ctx context.Context, in *BookingRequest, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, "/Booking/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingClient) GetReceipt(ctx context.Context, in *UserEmail, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, "/Booking/GetReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingClient) UpdateSeat(ctx context.Context, in *UpdateSeatRequest, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := c.cc.Invoke(ctx, "/Booking/UpdateSeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingClient) Cancel(ctx context.Context, in *UserEmail, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Booking/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingClient) GetSeatAllocations(ctx context.Context, in *Section, opts ...grpc.CallOption) (*AllocationList, error) {
	out := new(AllocationList)
	err := c.cc.Invoke(ctx, "/Booking/GetSeatAllocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingServer is the server API for Booking service.
// All implementations must embed UnimplementedBookingServer
// for forward compatibility
type BookingServer interface {
	Create(context.Context, *BookingRequest) (*Receipt, error)
	GetReceipt(context.Context, *UserEmail) (*Receipt, error)
	UpdateSeat(context.Context, *UpdateSeatRequest) (*Receipt, error)
	Cancel(context.Context, *UserEmail) (*Empty, error)
	GetSeatAllocations(context.Context, *Section) (*AllocationList, error)
	mustEmbedUnimplementedBookingServer()
}

// UnimplementedBookingServer must be embedded to have forward compatible implementations.
type UnimplementedBookingServer struct {
}

func (UnimplementedBookingServer) Create(context.Context, *BookingRequest) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBookingServer) GetReceipt(context.Context, *UserEmail) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceipt not implemented")
}
func (UnimplementedBookingServer) UpdateSeat(context.Context, *UpdateSeatRequest) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeat not implemented")
}
func (UnimplementedBookingServer) Cancel(context.Context, *UserEmail) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedBookingServer) GetSeatAllocations(context.Context, *Section) (*AllocationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeatAllocations not implemented")
}
func (UnimplementedBookingServer) mustEmbedUnimplementedBookingServer() {}

// UnsafeBookingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingServer will
// result in compilation errors.
type UnsafeBookingServer interface {
	mustEmbedUnimplementedBookingServer()
}

func RegisterBookingServer(s grpc.ServiceRegistrar, srv BookingServer) {
	s.RegisterService(&Booking_ServiceDesc, srv)
}

func _Booking_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Booking/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServer).Create(ctx, req.(*BookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Booking_GetReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServer).GetReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Booking/GetReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServer).GetReceipt(ctx, req.(*UserEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Booking_UpdateSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServer).UpdateSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Booking/UpdateSeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServer).UpdateSeat(ctx, req.(*UpdateSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Booking_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Booking/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServer).Cancel(ctx, req.(*UserEmail))
	}
	return interceptor(ctx, in, info, handler)
}

func _Booking_GetSeatAllocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Section)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingServer).GetSeatAllocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Booking/GetSeatAllocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingServer).GetSeatAllocations(ctx, req.(*Section))
	}
	return interceptor(ctx, in, info, handler)
}

// Booking_ServiceDesc is the grpc.ServiceDesc for Booking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Booking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Booking",
	HandlerType: (*BookingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Booking_Create_Handler,
		},
		{
			MethodName: "GetReceipt",
			Handler:    _Booking_GetReceipt_Handler,
		},
		{
			MethodName: "UpdateSeat",
			Handler:    _Booking_UpdateSeat_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Booking_Cancel_Handler,
		},
		{
			MethodName: "GetSeatAllocations",
			Handler:    _Booking_GetSeatAllocations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booking/booking.proto",
}
